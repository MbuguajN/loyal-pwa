datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id            String          @id @default(cuid())
  name          String?
  email         String          @unique
  phoneNumber   String?
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  passwordhash  String?
  // Optional for WebAuthn support
  Authenticator Authenticator[]
  role          Roles           @default(member)
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  Store         Store[]
  RedeemEvents  RedeemEvent[]
  AwardEvent    AwardEvent[]
MemberShip MemberShip[]
  Admin Admin?
}

enum Roles {
  business
  member
  admin
  superuser
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
}

model Franchise {
  id     Int     @id @default(autoincrement())
  name   String  @unique
  stores Store[]
}

model Store {
  id          Int           @id @default(autoincrement())
  location    String
  ownerId     String?
  franchiseId Int?
  franchise   Franchise?    @relation(fields: [franchiseId], references: [id])
  phoneNumber String
  user        User?         @relation(fields: [ownerId], references: [id])
  image       String?
  admins      Admin[]
  verified    Boolean       @default(false)
  Redeemables Redeemables[]
  RedeemEvent RedeemEvent[]
  memberships MemberShip[]
AwardEvent AwardEvent[]
}

model MemberShip {
  id       Int    @id @default(autoincrement())
  memberId String
  storeId  Int
  member   User   @relation(fields:[memberId], references: [id])
  store    Store  @relation(fields: [storeId], references: [id])
}

model AwardEvent {
  id             Int    @id @default(autoincrement())
  points_awarded Int
  customerId     String
  storeId        Int
  store          Store  @relation(fields: [storeId], references: [id])
  customer       User   @relation(fields: [customerId], references: [id])
}

model RedeemEvent {
  id              Int         @id @default(autoincrement())
  points_consumed Int
  redeemableId    Int
  customerId      String
  storeId         Int
  store           Store       @relation(fields: [storeId], references: [id])
  customer        User        @relation(fields: [customerId], references: [id])
  redeemable      Redeemables @relation(fields: [redeemableId], references: [id])
}

model Redeemables {
  id       Int    @id @default(autoincrement())
  name     String
  point    Int
  store_id Int
  store    Store  @relation(fields: [store_id], references: [id])
RedeemEvent RedeemEvent[]
}

model Admin {
  id      Int    @id @default(autoincrement())
  storeId Int
  store   Store  @relation(fields: [storeId], references: [id])
  userId  String @unique
  user    User   @relation(fields: [userId], references: [id])
}

