datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id            Int             @id @default(autoincrement())
  name          String?
  email         String          @unique
  phoneNumber   String?
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  passwordhash  String?
  // Optional for WebAuthn support
  Authenticator Authenticator[]
  role          Roles           @default(member)
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt

  Store Store[]
}

enum Roles {
  business
  member
  admin
  superuser
}

model Account {
  userId            Int
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       Int
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @unique
  userId               Int
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
}

model Franchise {
  id     Int     @id @default(autoincrement())
  name   String  @unique
  stores Store[]
}

model Store {
  id          Int        @id @default(autoincrement())
  location    String
  adminId     Int?
  franchiseId Int?
  franchise   Franchise? @relation(fields: [franchiseId], references: [id])
  phoneNumber String
  user        User?      @relation(fields: [adminId], references: [id])
}
